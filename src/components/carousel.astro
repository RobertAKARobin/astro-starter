---
import { getProps } from 'src/js/astro';

const { props, rest } = getProps(Astro.props, {
	id: `carousel`,
	source: [] as Array<unknown>,
});
---

<div
	class={`carousel ${props.class}`}
	id={props.id}
	{...rest}
>
	<button
		aria-hidden="true"
		class="carousel__arrow"
		data-toggle-trigger={props.id}
		data-toggle-index="-1"
	>
		&lsaquo;
	</button>

	<button
		aria-hidden="true"
		class="carousel__arrow"
		data-toggle-trigger={props.id}
		data-toggle-index="+1"
	>
		&rsaquo;
	</button>

	<div class="carousel__body">
		<div
			class="carousel__slides"
			id={`${props.id}__slides`}
		>
			<slot />
		</div>

		<p aria-hidden="true" class="carousel__toggles">
			{props.source.map((nil, index) =>
				<button
					data-toggle-trigger={props.id}
					data-toggle-index={index}
				>
					#{index}
				</button>,
			)}
		</p>
	</div>
</div>

<style lang="scss">
@use 'src/scss/vars';

.carousel {
	position: relative;
}

.carousel__body {
	display: flex;
	flex-direction: column;
	flex-grow: 1;
	height: 100%;
	justify-content: space-between;
	position: relative;
}

.carousel__slides {
	display: flex;
	flex-wrap: nowrap;
	overflow: hidden;
}

.carousel__slides > :global(*) {
	flex-shrink: 0;
	width: 100%;

	&:first-child {
		--slide-index: 0;

		margin-left: calc(var(--slide-index) * -100%);
		transition: margin-left .5s;
	}

	&:not(.toggle--on) {
		visibility: hidden;
	}
}

.carousel__toggles {
	display: flex;
	height: 100%;
	justify-content: center;
	margin-top: 10px;

	button {
		font-size: 0;
		padding: 15px;

		&::after {
			@include vars.encircle(5px);

			background-color: rgba(0 0 0 / .3);
			transition: background-color .2s;
		}

		&:hover::after {
			background-color: rgba(0 0 0 / .6);
		}

		&.toggle--on::after {
			background-color: vars.$color--brand;
		}
	}
}

.carousel__arrow {
	align-items: center;
	color: rgba(0 0 0 / .3);
	display: flex;
	flex-shrink: 0;
	font-size: 100px;
	height: 100%;
	justify-content: center;
	line-height: 0;
	position: absolute;
	transition: color .2s;
	width: 50px;

	&:hover {
		color: rgba(0 0 0 / .6);
	}

	&:first-of-type {
		right: 100%;
	}

	&:last-of-type {
		left: 100%;
	}
}
</style>

<script>
import { ToggleEvents, ToggleEndEvent } from 'src/js/toggle';

document.addEventListener(ToggleEvents.end, (event: CustomEvent) => {
	const detail = event.detail as ToggleEndEvent;
	const $slidesContainer = document.getElementById(`${detail.id}__slides`);
	const $slides = Array.from($slidesContainer.children);
	const $slide = $slides[0] as HTMLElement;
	$slide.style.setProperty('--slide-index', detail.state.index.toString());
});
</script>
